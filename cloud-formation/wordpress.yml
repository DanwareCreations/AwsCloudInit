AWSTemplateFormatVersion: 2010-09-09

Description: A WordPress instance in its own public subnet and automatically updated.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Subnet Configuration
        Parameters:
        - NetworkStackName
        - NumSshCidrBlocks
        - SshCidrBlocks
        - AzName
        - SubnetCidrBlock

Parameters:
  NetworkStackName:
    Type: String
    Default: MainVPC
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
    Description: Name of an active CloudFormation stack that contains the networking resources needed to create a WordPress server in its own public subnet.
    ConstraintDescription: must contain only alphanumeric characters and/or hyphens, and start with a letter
  NumSshCidrBlocks:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 5
    Description: The number of CIDR blocks from which SSH requests into the WordPress server will be accepted. The actual CIDR blocks must be entered in the SshCidrBlocks parameter.  Allowing SSH from ANY address (0.0.0.0/0) is strongly discouraged.
    ConstraintDescription: must be an integer between 1 and 5 (inclusive)
  SshCidrBlocks:
    Type: CommaDelimitedList
    Default: 0.0.0.0/0
    Description: An array of CIDR blocks that are separated by commas.  These are the actual CIDR blocks from which SSH requests will be accepted.  The total number of CIDR blocks should be one more than the total number of commas, and must match the number entered in NumSshCidrBlocks.
    ConstraintDescription: must be a comma-delimited list of valid CIDR blocks (e.g., 10.20.114.23/16), with no comma after the last item.
  AzName:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: The Availability Zone in which to create a public subnet for the new WordPress server.
  SubnetCidrBlock:
    Type: String
    Default: 10.0.128.0/28
    AllowedPattern: ^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}(\/\d{1,2})?$
    Description: The CIDR block for the new public subnet in the provided Availability Zone.
    ConstraintDescription: must be a valid CIDR block (e.g., 52.20.114.0/24)
  
Conditions:
  SshCidr5: !Equals [ !Ref NumSshCidrBlocks, 5 ]
  SshCidr4: !Or [ !Equals [ !Ref NumSshCidrBlocks, 4 ], !Condition SshCidr5]
  SshCidr3: !Or [ !Equals [ !Ref NumSshCidrBlocks, 3 ], !Condition SshCidr4]
  SshCidr2: !Or [ !Equals [ !Ref NumSshCidrBlocks, 2 ], !Condition SshCidr3]
  SshCidr1: !Or [ !Equals [ !Ref NumSshCidrBlocks, 1 ], !Condition SshCidr2]
    
Resources:
  
  # Network ACL for the new public subnet(s)
  PubACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !ImportValue MainVPC
  InEphemeraAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 100
      Egress: false
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 1024, To: 65535 }
      CidrBlock: 0.0.0.0/0
  InIcmpAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 110
      Egress: false
      RuleAction: allow
      Protocol: 1
      Icmp: { Code: -1, Type: -1 }
      CidrBlock: 0.0.0.0/0
  InHttpAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 120
      Egress: false
      RuleAction: allow
      Protocol: 6
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 80, To: 80 }
  InHttpsAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 121
      Egress: false
      RuleAction: allow
      Protocol: 6
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 443, To: 443 }
  InNtpAcl:     # Both outbound and inbound ACL entries required
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 130
      Egress: false
      RuleAction: allow
      Protocol: 17
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 123, To: 123 }
  OutEphemeraAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 100
      Egress: true
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 1024, To: 65535 }
      CidrBlock: 0.0.0.0/0
  OutIcmpAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 110
      Egress: true
      RuleAction: allow
      Protocol: 1
      Icmp: { Code: -1, Type: -1 }
      CidrBlock: 0.0.0.0/0
  OutHttpAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 120
      Egress: true
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 80, To: 80 }
      CidrBlock: 0.0.0.0/0
  OutHttpsAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 121
      Egress: true
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 443, To: 443 }
      CidrBlock: 0.0.0.0/0
  OutNtpAcl:     # Both outbound and inbound ACL entries required
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 130
      Egress: true
      RuleAction: allow
      Protocol: 17
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 123, To: 123 }
  OutSmtpAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 140
      Egress: true
      RuleAction: allow
      Protocol: 6
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 25, To: 25 }
      
  # SSH ingress ACL rules
  InSshAcl1:
    Condition: SshCidr1
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 141
      Egress: false
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 22, To: 22 }
      CidrBlock: !Select [ 0, !Ref SshCidrBlocks ]
  InSshAcl2:
    Condition: SshCidr2
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 142
      Egress: false
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 22, To: 22 }
      CidrBlock: !Select [ 1, !Ref SshCidrBlocks ]
  InSshAcl3:
    Condition: SshCidr3
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 143
      Egress: false
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 22, To: 22 }
      CidrBlock: !Select [ 2, !Ref SshCidrBlocks ]
  InSshAcl4:
    Condition: SshCidr4
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 144
      Egress: false
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 22, To: 22 }
      CidrBlock: !Select [ 3, !Ref SshCidrBlocks ]
  InSshAcl5:
    Condition: SshCidr5
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 145
      Egress: false
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 22, To: 22 }
      CidrBlock: !Select [ 4, !Ref SshCidrBlocks ]
      
  # Security Group for the WordPress server
  WordPressSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue MainVPC
      GroupDescription: Allow SSH traffic and boilerplate traffic for keeping the instance up-to-date.
      SecurityGroupIngress:
      - # ICMP traffic from anywhere
        IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - # ICMP traffic to anywhere
        IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      - # HTTP for automatic updates
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - # HTTPS to access cloud-init scripts in GitHub
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - # NTP to synchronize UTC time with a pool of public servers (only outbound rule required)
        IpProtocol: udp
        FromPort: 123
        ToPort: 123
        CidrIp: 0.0.0.0/0
      - # SMTP to send cron output
        IpProtocol: tcp
        FromPort: 25
        ToPort: 25
        CidrIp: 0.0.0.0/0
  IngressFromSameSgRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WordPressSG
      IpProtocol: -1
      SourceSecurityGroupId: !Ref WordPressSG
  EgressToSameSgRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref WordPressSG
      IpProtocol: -1
      SourceSecurityGroupId: !Ref WordPressSG
        
  # SSH ingress security group rules
  SshIngressSgRule1:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: SshCidr1
    Properties:
      GroupId: !Ref WordPressSG
      CidrIp: !Select [ 0, !Ref SshCidrBlocks ]
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
  SshIngressSgRule2:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: SshCidr2
    Properties:
      GroupId: !Ref WordPressSG
      CidrIp: !Select [ 1, !Ref SshCidrBlocks ]
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
  SshIngressSgRule3:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: SshCidr3
    Properties:
      GroupId: !Ref WordPressSG
      CidrIp: !Select [ 2, !Ref SshCidrBlocks ]
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
  SshIngressSgRule4:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: SshCidr4
    Properties:
      GroupId: !Ref WordPressSG
      CidrIp: !Select [ 3, !Ref SshCidrBlocks ]
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
  SshIngressSgRule5:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: SshCidr5
    Properties:
      GroupId: !Ref WordPressSG
      CidrIp: !Select [ 4, !Ref SshCidrBlocks ]
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      
  # Define the new public subnet
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue MainVPC
      AvailabilityZone: !Ref AzName
      CidrBlock: !Ref SubnetCidrBlock
      MapPublicIpOnLaunch: true
  RTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !ImportValue PublicRouteTable
      SubnetId: !Ref Subnet
  ACLAssoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PubACL
      SubnetId: !Ref Subnet