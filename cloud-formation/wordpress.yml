AWSTemplateFormatVersion: 2010-09-09

Description: A WordPress server in its own public subnet and automatically updated.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Subnet Configuration
        Parameters:
        - NetworkStackName
        - AzName
        - SubnetCidrBlock
        - BastionCidrBlock
      -
        Label:
          default: WordPress Server Instance Configuration
        Parameters:
        - PublicDns
        - HostedZone
        - ElasticIP
        - InstanceType
        - AmiLookupFunctionArn
      -
        Label:
          default: WordPress Server Software Configuration
        Parameters:
        - KeyPair
        - TimeZone
        - YumUpdateEmail
        - MySQLRootPassword
        - MySQLWordPressPassword

Parameters:
  NetworkStackName:
    Type: String
    Default: MainVPC
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
    Description: Name of an active CloudFormation stack that contains the networking resources needed to create a WordPress server in its own public subnet.
    ConstraintDescription: must contain only alphanumeric characters and/or hyphens, and start with a letter
  AzName:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: The Availability Zone in which to create a public subnet for the new WordPress server.
  SubnetCidrBlock:
    Type: String
    Default: 10.0.140.0/28
    AllowedPattern: ^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}(\/\d{1,2})?$
    Description: The CIDR block for the new public subnet in the provided Availability Zone.  Block size must be between a /16 netmask and a /28 netmask.
    ConstraintDescription: must be a valid CIDR block (e.g., 10.20.114.0/24)
  BastionCidrBlock:
    Type: String
    Default: 10.0.128.0/24
    AllowedPattern: ^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}(\/\d{1,2})?$
    Description: This is the CIDR block from which SSH requests will be accepted.  You should only enter the CIDR block containing your bastion hosts.  Allowing SSH from ANY address (0.0.0.0/0) is strongly discouraged.
    ConstraintDescription: must be a valid CIDR block (e.g., 10.20.114.0/24)

  PublicDns:
    Type: String
    Default: www.mycompany.com
    MaxLength: 255
    AllowedPattern: ^([0-9A-Za-z]+[._-]?)+[0-9A-Za-z]+$
    ConstraintDescription: must be a valid domain name, i.e., <= 255 alphanumeric characters, periods, hyphens, and underscores.
    Description: The public DNS name that will be assigned to the new WordPress server.  It must be a subdomain of a hosted zone that has already been created in AWS.
  HostedZone:
    Type: AWS::Route53::HostedZone::Id
    Description: The hosted zone in which the new WordPress server's CNAME record will be stored.
  ElasticIP:
    Type: String
    Default: 0.0.0.0
    AllowedPattern: ^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}$
    Description: An existing Elastic IP address to use as the public IP of the new WordPress server's EC2 instance.
    ConstraintDescription: must be a valid IP address (e.g., 10.20.114.0).
  InstanceType:
    Type: String
    Default: t2.micro
    Description: EC2 instance type for the WordPress server.  Note that changing this value will require restarting the server.  We recommend starting with one from the cheaper T2 or M4 general-purpose families.
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m4.16xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - p2.xlarge
    - p2.8xlarge
    - p2.16xlarge
    - g2.2xlarge
    - g2.8xlarge
    - x1.16large
    - x1.32xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    - r4.8xlarge
    - r4.16xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i3.large
    - i3.xlarge
    - i3.2xlarge
    - i3.4xlarge
    - i3.8xlarge
    - i3.16large
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - f1.2xlarge
    - f1.16xlarge
  AmiLookupFunctionArn:
    Type: String
    Default: arn:aws:lambda:REGION:ACCOUNT_ID:function:RegionLookup
    Description: ARN of a Lambda function that can return the latest AMIs for this region.  Replace "REGION" and "ACCOUNT_ID" with appropriate values, and the function name, if applicable.
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The EC2 key pair needed to connect to the new WordPress server.
  TimeZone:
    Type: String
    Default: UTC
    Description: Name of a time zone data file in /usr/share/zoneinfo (for example "America/New_York").  Used to set the time zone for the WordPress server.
  YumUpdateEmail:
    Type: String
    Default: admin@mycompany.com
    MaxLength: 255
    AllowedPattern: ^([0-9A-Za-z]+[._-]?)+[0-9A-Za-z]+@([0-9A-Za-z]+[._-]?)+\.[0-9A-Za-z]+$
    ConstraintDescription: must be a valid Email address, like "frodo@theshire.com".
    Description: Email to which notifications from automatic yum updates will be sent.  These notifications will only indicate that updates have been downloaded; the updates will still have to be installed manually.
  MySQLRootPassword:
    Type: String
    NoEcho: true
    Description: Password for the root user of the WordPress server's backend MySQL database.  This password can be left blank if not required (after all, anyone wishing to access the database will already have to have SSH and superuser privileges on the WordPress server).
  MySQLWordPressPassword:
    Type: String
    NoEcho: true
    Description: Password for the 'wordpress' user of the backend MySQL database.  This password can be left blank if not required (after all, anyone wishing to access the database will already have to have SSH and superuser privileges on the WordPress server).

Resources:

  # Network ACL for the new public subnet(s)
  PubACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !ImportValue MainVPC
  InEphemeraAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 100
      Egress: false
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 1024, To: 65535 }
      CidrBlock: 0.0.0.0/0
  InIcmpAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 110
      Egress: false
      RuleAction: allow
      Protocol: 1
      Icmp: { Code: -1, Type: -1 }
      CidrBlock: 0.0.0.0/0
  InSshAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 140
      Egress: false
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 22, To: 22 }
      CidrBlock: !Ref BastionCidrBlock
  InHttpAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 120
      Egress: false
      RuleAction: allow
      Protocol: 6
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 80, To: 80 }
  InHttpsAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 121
      Egress: false
      RuleAction: allow
      Protocol: 6
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 443, To: 443 }
  InNtpAcl:     # Both outbound and inbound ACL entries required
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 130
      Egress: false
      RuleAction: allow
      Protocol: 17
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 123, To: 123 }
  OutEphemeraAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 100
      Egress: true
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 1024, To: 65535 }
      CidrBlock: 0.0.0.0/0
  OutIcmpAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 110
      Egress: true
      RuleAction: allow
      Protocol: 1
      Icmp: { Code: -1, Type: -1 }
      CidrBlock: 0.0.0.0/0
  OutHttpAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 120
      Egress: true
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 80, To: 80 }
      CidrBlock: 0.0.0.0/0
  OutHttpsAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 121
      Egress: true
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 443, To: 443 }
      CidrBlock: 0.0.0.0/0
  OutNtpAcl:     # Both outbound and inbound ACL entries required
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 130
      Egress: true
      RuleAction: allow
      Protocol: 17
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 123, To: 123 }
  OutSmtpAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 140
      Egress: true
      RuleAction: allow
      Protocol: 6
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 25, To: 25 }
      
  # Security Group for the WordPress server
  WordPressSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue MainVPC
      GroupDescription: Allow SSH traffic and boilerplate traffic for keeping the instance up-to-date.
      SecurityGroupIngress:
      - 
        Description: ICMP traffic from anywhere
        IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      - 
        Description: SSH access from bastion hosts
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref BastionCidrBlock
      - 
        Description: HTTP for internet access
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - 
        Description: HTTPS for internet access
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - 
        Description: ICMP traffic to anywhere
        IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      - 
        Description: HTTP for automatic updates
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - 
        Description: HTTPS for cfn-init to describe resources in CloudFormation stacks
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - 
        Description: NTP to synchronize UTC time with a pool of public servers (only outbound rule required)
        IpProtocol: udp
        FromPort: 123
        ToPort: 123
        CidrIp: 0.0.0.0/0
      - 
        Description: SMTP to send cron output
        IpProtocol: tcp
        FromPort: 25
        ToPort: 25
        CidrIp: 0.0.0.0/0
  IngressFromSameSgRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow ingress from anything in this same SecurityGroup
      GroupId: !Ref WordPressSG
      IpProtocol: -1
      SourceSecurityGroupId: !Ref WordPressSG
  EgressToSameSgRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow egress to anything in this same SecurityGroup
      GroupId: !Ref WordPressSG
      IpProtocol: -1
      SourceSecurityGroupId: !Ref WordPressSG

  # Define the new public subnet
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue MainVPC
      AvailabilityZone: !Ref AzName
      CidrBlock: !Ref SubnetCidrBlock
      MapPublicIpOnLaunch: true
  RTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !ImportValue PublicRouteTable
      SubnetId: !Ref Subnet
  ACLAssoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PubACL
      SubnetId: !Ref Subnet

  # Define the EC2 instance
  AmiLookup:
    Type: Custom::AmiLookup
    Properties:
      ServiceToken: !Ref AmiLookupFunctionArn
      Region: !Ref "AWS::Region"
      AmiLookupType: amzn-linux
      InstanceType: !Ref InstanceType
  WordPress:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: true
      EbsOptimized: false
      ImageId: !GetAtt AmiLookup.ImageId
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPair
      Monitoring: true
      NetworkInterfaces:
      - DeviceIndex: 0
        AssociatePublicIpAddress: true
        DeleteOnTermination: true
        GroupSet: [ !Ref WordPressSG ]
        SubnetId: !Ref Subnet
        Description: Network interface for a WordPress server
      SourceDestCheck: true
      Tenancy: default
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install -y aws-cfn-bootstrap  # not really necessary with Amazon Linux AMI, but the docs recommend it
          /opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --region ${AWS::Region} --resource WordPress --configsets wp
          /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --region ${AWS::Region} --resource WordPress
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M   # Minutes, default 5
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          wp:
          - cfn-hup
          - add-newline-to-bash
          - auto-yum-update
          - lamp
          - harden
          - wordpress
          - dns-hostname    # manually calls reboot, so must come after other config sets
          - set-timezone    # manually calls reboot, so must come after other config sets
        cfn-hup:
          packages:
            yum:
              aws-cfn-bootstrap: []
          files:
            /etc/cfn/cfn-hup.conf:
              # interval in minutes, default 15 (comments not allowed in cfn.hup file)
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=15
                verbose=true
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.conf:
              content: !Sub |
                [reset-on-update]
                triggers=post.update
                path=Resources.WordPress.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --region ${AWS::Region} --resource WordPress --configsets wp
                runas=root
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.conf
                packages:
                  yum: [ aws-cfn-bootstrap ]
        add-newline-to-bash:
          commands:
            add-newline-to-bash:
              command: |
                echo 'PS1="\n$PS1"' >> /home/ec2-user/.bashrc
                echo Added a newline to bash prompt
              test: |
                numAddedLines=$(cat /home/ec2-user/.bashrc | grep '^PS1="\\n\$PS1"$' | wc --lines)
                if [ $numAddedLines = 0 ] ; then
                  echo Newline will be added to bash prompt
                  exit 0
                else
                  echo Newline already added to bash prompt
                  exit 1
                fi
              ignoreErrors: true
        auto-yum-update:
          packages:
            yum:
              yum-cron: []
              postfix: []
              mailx: []
          files:
            /etc/danware/bastion-yum-cron.sed:
              content: !Sub |
                s|update_messages.*|update_messages = yes|
                s|download_updates.*|download_updates = yes|
                s|apply_updates.*|apply_updates = no|
                s|system_name.*|system_name = None|
                s|emit_via.*|emit_via = email|
                s|email_from.*|email_from = yum-cron@localhost|
                s|email_to.*|email_to = ${YumUpdateEmail}|
              mode: "000400"
              owner: root
              group: root
          commands:
            1_security-updates:
              command: |
                sed --file /etc/danware/bastion-yum-cron.sed --in-place /etc/yum/yum-cron-hourly.conf
                sed 's|update_cmd.*|update_cmd = security|' --in-place /etc/yum/yum-cron-hourly.conf
                echo Hourly security updates configured
            2_complete-updates:
              command: |
                sed --file /etc/danware/bastion-yum-cron.sed --in-place /etc/yum/yum-cron.conf
                echo Daily complete updates configured
            3_restart-yum-cron:
              command: |
                service yum-cron restart
          services:
            sysvinit:
              yum-cron:
                enabled: true
                ensureRunning: true
                packages: 
                  yum: [ yum-cron ]
              postfix:
                enabled: true
                ensureRunning: true
                packages: 
                  yum: [ postfix ]
        lamp:
          packages:
            yum:
              httpd24: []
              php70: []
              mysql56-server: []
              php70-mysqlnd: []
              mod24_ssl: []
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - httpd24
                  - mod24_ssl
              mysqld:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - mysql56-server
                  - php70-mysqlnd
        harden:
          files:
            /etc/danware/apache-ssl.sed:
              content: |
                # Uncomment directives
                s|#SSLProtocol|SSLProtocol|
                s|#SSLProxyProtocol|SSLProxyProtocol|
                s|#SSLCipherSuite|SSLCipherSuite|
                s|#SSLProxyCipherSuite|SSLProxyCipherSuite|
                s|#SSLHonorCipherOrder|SSLHonorCipherOrder|
                
                # Set directive values
                s|SSLProtocol.*|SSLProtocol -SSLv2 -SSLv3 -TLSv1 -TLSv1.1 +TLSv1.2|
                s|SSLProxyProtocol.*|SSLProxyProtocol -SSLv2 -SSLv3 -TLSv1 -TLSv1.1 +TLSv1.2|
                s|SSLCipherSuite.*|SSLCipherSuite ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA|
                s|SSLProxyCipherSuite.*|SSLProxyCipherSuite ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA|
                s|SSLHonorCipherOrder.*|SSLHonorCipherOrder on|
              mode: "000400"
              owner: root
              group: root
            /etc/danware/secure-mysql.sql:
              content: !Sub |
                UPDATE mysql.user SET Password=PASSWORD('${MySQLRootPassword}') WHERE User='root';
                DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');
                DELETE FROM mysql.user WHERE User='';
                DELETE FROM mysql.db WHERE Db='test' OR Db LIKE 'test_%';
                FLUSH PRIVILEGES;
              mode: "000400"
              owner: root
              group: root
          commands:
            harden-mysql:
              command: |
                mysql --user root < /etc/danware/secure-mysql.sql
                echo MySQL server hardened
            harden-web-server:
              command: |
                sed --file /etc/danware/apache-ssl.sed --in-place /etc/httpd/conf.d/ssl.conf
                echo Apache server hardened
                service httpd restart
        wordpress:
          sources:
            /etc/danware: https://wordpress.org/latest.tar.gz
          files:
            /etc/danware/wp-config.sed:
              content: !Sub |
                s|\r||
                /DB_NAME/s|, '.*'|, 'wp'|
                /DB_USER/s|, '.*'|, 'wp'|
                /DB_PASSWORD/s|, '.*'|, '${MySQLWordPressPassword}'|
                /'AUTH_KEY'/i__D_A_N_W_A_R_E__
                /'AUTH_KEY'/,/NONCE_SALT/d
              mode: "000400"
              owner: root
              group: root
          commands:
            create-wp-db:
              command: !Sub |
                mysql --user root --password=${MySQLRootPassword} --execute "CREATE DATABASE wp;" --batch --silent
                echo WordPress database created.
              test: !Sub |
                dbExists=$(mysql --user root --password=${MySQLRootPassword} --execute "SHOW DATABASES;" --batch --silent | grep wp | wc --lines)
                if [ $dbExists = 0 ] ; then
                  echo WordPress database will be created.
                  exit 0
                else
                  echo WordPress database already exists.
                  exit 1
                fi
            create-wp-user:
              command: !Sub |
                mysql --user root --password=${MySQLRootPassword} --execute "GRANT ALL PRIVILEGES ON wp.* TO 'wp'@'localhost' IDENTIFIED BY '${MySQLWordPressPassword}'; FLUSH PRIVILEGES;" --batch --silent
                echo WordPress database user created.
              test: !Sub |
                userExists=$(mysql --user root --password=${MySQLRootPassword} --execute "SELECT user FROM mysql.user where user = 'wp';" --batch --silent | grep wp | wc --lines)
                if [ $userExists = 0 ] ; then
                  echo WordPress database user will be created.
                  exit 0
                else
                  echo WordPress database user already exists.
                  exit 1
                fi
            move-to-apache-root:
              command: |
                mv /etc/danware/wordpress/* /var/www/html/
                rm --force --recursive /etc/danware/wordpress/    # Folder doesn't belong to root so mv doesn't delete it
                echo WordPress files moved to Apache root.
              test: |
                if [ -e /var/www/html/wp-activate.php ] ; then
                  echo WordPress files already moved to Apache root.
                  exit 1
                else
                  echo WordPress files will be moved to Apache root.
                  exit 0
                fi
            permalinks:
              command: |
                sed "151s|AllowOverride.*|AllowOverride All|" --in-place /etc/httpd/conf/httpd.conf
                service httpd restart
                echo WordPress permalinks have been allowed.
            sample-config-copy:
              cwd: /var/www/html/
              command: |
                cp wp-config-sample.php wp-config.php
                echo Created WordPress config file from the sample.
              test: |
                if [ ! -e wp-config.php -a -e wp-config-sample.php ] ; then
                  echo WordPress config file will be created.
                  exit 0
                else
                  echo WordPress config file already created, or sample could not be found to copy.
                  exit 1
                fi
            update-config:
              cwd: /var/www/html/
              command: |
                sed --file /etc/danware/wp-config.sed --in-place wp-config.php
                sed "s|__D_A_N_W_A_R_E__|curl --silent https://api.wordpress.org/secret-key/1.1/salt/|e" --in-place wp-config.php
                echo WordPress config file updated.
              test: |
                if [ -e wp-config.php ] ; then
                  echo WordPress config file located for updating.
                  exit 0
                else
                  echo WordPress config file could not be located for updating.
                  exit 1
                fi
        dns-hostname:
          commands:
            dns-hostname:
              command: !Sub |
                newName=${PublicDns}
                oldName=$(hostname)
                sed "s|HOSTNAME.*|HOSTNAME=$newName|" --in-place /etc/sysconfig/network
                echo HOSTNAME changed from \"$oldName\" to \"$newName\"
                reboot
              test: !Sub |
                publicDns=${PublicDns}
                numChangedLines=$(cat /etc/sysconfig/network | grep "^HOSTNAME=$publicDns$" | wc --lines)
                if [ $numChangedLines = 0 ] ; then
                  echo HOSTNAME will be changed to \"$publicDns\"
                  exit 0
                else
                  echo HOSTNAME is already \"$publicDns\"
                  exit 1
                fi
              ignoreErrors: true
        set-timezone:
          commands:
            set-timezone:
              command: !Sub |
                newZone=${TimeZone}
                oldZone=$(date +%Z)
                sed "s|ZONE.*|ZONE=\"$newZone\"|" --in-place /etc/sysconfig/clock
                ln --symbolic --force /usr/share/zoneinfo/$newZone /etc/localtime
                echo Time zone changed from \"$oldZone\" to \"$newZone\"
                reboot
              test: !Sub |
                timeZone=${TimeZone}
                numChangedLines=$(cat /etc/sysconfig/clock | grep "^ZONE=\"$timeZone\"$" | wc --lines)
                if [ $numChangedLines = 0 ] ; then
                  echo Time zone will be changed to \"$timeZone\"
                  exit 0
                else
                  echo Time zone is already \"$timeZone\"
                  exit 1
                fi

  # Set up DNS for the server
  EIPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      EIP: !Ref ElasticIP
      InstanceId: !Ref WordPress
  CnameRecordSet:
    Type: AWS::Route53::RecordSet
    DependsOn: EIPAssoc
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref PublicDns
      Type: CNAME
      ResourceRecords: [ !GetAtt WordPress.PublicDnsName ]
      TTL: 60
      Comment: String
      # HealthCheckId: String

Outputs:
  WordPress:
    Value: !GetAtt WordPress.PublicIp
    Description: The public IP address of the new WordPress server