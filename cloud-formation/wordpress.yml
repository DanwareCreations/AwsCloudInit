AWSTemplateFormatVersion: 2010-09-09

Description: A WordPress server in its own public subnet and automatically updated.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Subnet Configuration
        Parameters:
        - NetworkStackName
        - NumSshCidrBlocks
        - SshCidrBlocks
        - AzName
        - SubnetCidrBlock
      -
        Label:
          default: WordPress Server Instance Configuration
        Parameters:
        - PublicDns
        - HostedZone
        - ElasticIP
        - AmiLookupFunctionArn
        - KeyPair
        - TimeZone
        - YumUpdateEmail

Parameters:
  NetworkStackName:
    Type: String
    Default: MainVPC
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
    Description: Name of an active CloudFormation stack that contains the networking resources needed to create a WordPress server in its own public subnet.
    ConstraintDescription: must contain only alphanumeric characters and/or hyphens, and start with a letter
  NumSshCidrBlocks:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 5
    Description: The number of CIDR blocks from which SSH requests into the WordPress server will be accepted. The actual CIDR blocks must be entered in the SshCidrBlocks parameter.  Allowing SSH from ANY address (0.0.0.0/0) is strongly discouraged.
    ConstraintDescription: must be an integer between 1 and 5 (inclusive)
  SshCidrBlocks:
    Type: CommaDelimitedList
    Default: 0.0.0.0/0
    Description: An array of CIDR blocks that are separated by commas.  These are the actual CIDR blocks from which SSH requests will be accepted.  The total number of CIDR blocks should be one more than the total number of commas, and must match the number entered in NumSshCidrBlocks.
    ConstraintDescription: must be a comma-delimited list of valid CIDR blocks (e.g., 10.20.114.23/16), with no comma after the last item.
  AzName:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: The Availability Zone in which to create a public subnet for the new WordPress server.
  SubnetCidrBlock:
    Type: String
    Default: 10.0.130.0/28
    AllowedPattern: ^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}(\/\d{1,2})?$
    Description: The CIDR block for the new public subnet in the provided Availability Zone.
    ConstraintDescription: must be a valid CIDR block (e.g., 52.20.114.0/24)
    
  PublicDns:
    Type: String
    Default: www.mycompany.com
    MaxLength: 255
    AllowedPattern: ^([0-9A-Za-z]+[._-]?)+[0-9A-Za-z]+$
    ConstraintDescription: must be a valid domain name, i.e., <= 255 alphanumeric characters, periods, hyphens, and underscores.
    Description: The public DNS name that will be assigned to the new WordPress server.  It must be a subdomain of a hosted zone that has already been created in AWS.
  HostedZone:
    Type: AWS::Route53::HostedZone::Id
    Description: The hosted zone in which the new WordPress server's CNAME record will be stored.
  ElasticIP:
    Type: String
    Default: 0.0.0.0
    AllowedPattern: ^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}$
    Description: An existing Elastic IP address to use as the public IP of the new WordPress server's EC2 instance.
    ConstraintDescription: must be a valid IP address (e.g., 52.20.114.0).
  AmiLookupFunctionArn:
    Type: String
    Default: arn:aws:lambda:REGION:ACCOUNT_ID:function:RegionLookup
    Description: ARN of a Lambda function that can return the latest AMIs for this region.  Replace "REGION" and "ACCOUNT_ID" with appropriate values, and the function name if applicable.
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The EC2 key pair needed to connect to the new WordPress server.
  TimeZone:
    Type: String
    Default: UTC
    Description: Name of a time zone data file in /usr/share/zoneinfo (for example "America/New_York").  Used to set the time zone for the WordPress server.
  YumUpdateEmail:
    Type: String
    Default: admin@mycompany.com
    MaxLength: 255
    AllowedPattern: ^([0-9A-Za-z]+[._-]?)+[0-9A-Za-z]+@([0-9A-Za-z]+[._-]?)+\.[0-9A-Za-z]+$
    ConstraintDescription: must be a valid Email address, like "frodo@theshire.com".
    Description: Email to which notifications from automatic yum updates will be sent.  These notifications will only indicate that updates have been downloaded; the updates will still have to be installed manually.
  
  
  
Conditions:
  SshCidr5: !Equals [ !Ref NumSshCidrBlocks, 5 ]
  SshCidr4: !Or [ !Equals [ !Ref NumSshCidrBlocks, 4 ], !Condition SshCidr5]
  SshCidr3: !Or [ !Equals [ !Ref NumSshCidrBlocks, 3 ], !Condition SshCidr4]
  SshCidr2: !Or [ !Equals [ !Ref NumSshCidrBlocks, 2 ], !Condition SshCidr3]
  SshCidr1: !Or [ !Equals [ !Ref NumSshCidrBlocks, 1 ], !Condition SshCidr2]
    
Resources:
  
  # Network ACL for the new public subnet(s)
  PubACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !ImportValue MainVPC
  InEphemeraAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 100
      Egress: false
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 1024, To: 65535 }
      CidrBlock: 0.0.0.0/0
  InIcmpAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 110
      Egress: false
      RuleAction: allow
      Protocol: 1
      Icmp: { Code: -1, Type: -1 }
      CidrBlock: 0.0.0.0/0
  InHttpAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 120
      Egress: false
      RuleAction: allow
      Protocol: 6
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 80, To: 80 }
  InHttpsAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 121
      Egress: false
      RuleAction: allow
      Protocol: 6
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 443, To: 443 }
  InNtpAcl:     # Both outbound and inbound ACL entries required
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 130
      Egress: false
      RuleAction: allow
      Protocol: 17
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 123, To: 123 }
  OutEphemeraAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 100
      Egress: true
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 1024, To: 65535 }
      CidrBlock: 0.0.0.0/0
  OutIcmpAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 110
      Egress: true
      RuleAction: allow
      Protocol: 1
      Icmp: { Code: -1, Type: -1 }
      CidrBlock: 0.0.0.0/0
  OutHttpAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 120
      Egress: true
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 80, To: 80 }
      CidrBlock: 0.0.0.0/0
  OutHttpsAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 121
      Egress: true
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 443, To: 443 }
      CidrBlock: 0.0.0.0/0
  OutNtpAcl:     # Both outbound and inbound ACL entries required
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 130
      Egress: true
      RuleAction: allow
      Protocol: 17
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 123, To: 123 }
  OutSmtpAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 140
      Egress: true
      RuleAction: allow
      Protocol: 6
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 25, To: 25 }
      
  # SSH ingress ACL rules
  InSshAcl1:
    Condition: SshCidr1
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 141
      Egress: false
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 22, To: 22 }
      CidrBlock: !Select [ 0, !Ref SshCidrBlocks ]
  InSshAcl2:
    Condition: SshCidr2
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 142
      Egress: false
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 22, To: 22 }
      CidrBlock: !Select [ 1, !Ref SshCidrBlocks ]
  InSshAcl3:
    Condition: SshCidr3
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 143
      Egress: false
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 22, To: 22 }
      CidrBlock: !Select [ 2, !Ref SshCidrBlocks ]
  InSshAcl4:
    Condition: SshCidr4
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 144
      Egress: false
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 22, To: 22 }
      CidrBlock: !Select [ 3, !Ref SshCidrBlocks ]
  InSshAcl5:
    Condition: SshCidr5
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 145
      Egress: false
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 22, To: 22 }
      CidrBlock: !Select [ 4, !Ref SshCidrBlocks ]
      
  # Security Group for the WordPress server
  WordPressSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue MainVPC
      GroupDescription: Allow SSH traffic and boilerplate traffic for keeping the instance up-to-date.
      SecurityGroupIngress:
      - # ICMP traffic from anywhere
        IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      - # HTTP for internet access
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - # HTTPS for internet access
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - # ICMP traffic to anywhere
        IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      - # HTTP for automatic updates
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - # HTTPS for cfn-init to describe resources in CloudFormation stacks
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - # NTP to synchronize UTC time with a pool of public servers (only outbound rule required)
        IpProtocol: udp
        FromPort: 123
        ToPort: 123
        CidrIp: 0.0.0.0/0
      - # SMTP to send cron output
        IpProtocol: tcp
        FromPort: 25
        ToPort: 25
        CidrIp: 0.0.0.0/0
  IngressFromSameSgRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WordPressSG
      IpProtocol: -1
      SourceSecurityGroupId: !Ref WordPressSG
  EgressToSameSgRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref WordPressSG
      IpProtocol: -1
      SourceSecurityGroupId: !Ref WordPressSG
        
  # SSH ingress security group rules
  SshIngressSgRule1:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: SshCidr1
    Properties:
      GroupId: !Ref WordPressSG
      CidrIp: !Select [ 0, !Ref SshCidrBlocks ]
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
  SshIngressSgRule2:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: SshCidr2
    Properties:
      GroupId: !Ref WordPressSG
      CidrIp: !Select [ 1, !Ref SshCidrBlocks ]
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
  SshIngressSgRule3:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: SshCidr3
    Properties:
      GroupId: !Ref WordPressSG
      CidrIp: !Select [ 2, !Ref SshCidrBlocks ]
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
  SshIngressSgRule4:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: SshCidr4
    Properties:
      GroupId: !Ref WordPressSG
      CidrIp: !Select [ 3, !Ref SshCidrBlocks ]
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
  SshIngressSgRule5:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: SshCidr5
    Properties:
      GroupId: !Ref WordPressSG
      CidrIp: !Select [ 4, !Ref SshCidrBlocks ]
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      
  # Define the new public subnet
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue MainVPC
      AvailabilityZone: !Ref AzName
      CidrBlock: !Ref SubnetCidrBlock
      MapPublicIpOnLaunch: true
  RTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !ImportValue PublicRouteTable
      SubnetId: !Ref Subnet
  ACLAssoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PubACL
      SubnetId: !Ref Subnet
      
  # Define the EC2 instance
  AmiLookup:
    Type: Custom::AmiLookup
    Properties:
      ServiceToken: !Ref AmiLookupFunctionArn
      Region: !Ref "AWS::Region"
      AmiLookupType: amzn-linux
      InstanceType: t2.micro
  WordPress:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: true
      EbsOptimized: false
      ImageId: !GetAtt AmiLookup.ImageId
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: t2.micro
      KeyName: !Ref KeyPair
      Monitoring: true
      NetworkInterfaces:
      - DeviceIndex: 0
        AssociatePublicIpAddress: true
        DeleteOnTermination: true
        GroupSet: [ !Ref WordPressSG ]
        SubnetId: !Ref Subnet
        Description: Network interface for a WordPress server
      SourceDestCheck: true
      Tenancy: default
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install -y aws-cfn-bootstrap  # not really necessary with Amazon Linux AMI, but the docs recommend it
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --region ${AWS::Region} --resource WordPress --configsets wp
          /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --region ${AWS::Region} --resource WordPress
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M   # Minutes, default 5
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          wp:
          - cfn-hup
          - add-newline-to-bash
          - auto-yum-update
          - lamp
          - dns-hostname    # manually calls reboot, so must come after other config sets
          - set-timezone    # manually calls reboot, so must come after other config sets
        cfn-hup:
          packages:
            yum:
              aws-cfn-bootstrap: []
          files:
            /etc/cfn/cfn-hup.conf:
              # interval in minutes, default 15 (comments not allowed in cfn.hup file)
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=5
                verbose=true
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.conf:
              content: !Sub |
                [reset-on-update]
                triggers=post.update
                path=Resources.WordPress.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --region ${AWS::Region} --resource WordPress --configsets wp
                runas=root
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.conf
                packages: 
                  yum: [ aws-cfn-bootstrap ]
        add-newline-to-bash:
          commands:
            add-newline-to-bash:
              command: |
                echo 'PS1="\n$PS1"' >> /home/ec2-user/.bashrc
                echo Added a newline to bash prompt
              test: |
                numAddedLines=$(cat /home/ec2-user/.bashrc | grep '^PS1="\\n\$PS1"$' | wc -l)
                if [ $numAddedLines = 0 ] ; then
                  echo Newline will be added to bash prompt
                  exit 0
                else
                  echo Newline already added to bash prompt
                  exit 1
                fi
              ignoreErrors: true
        auto-yum-update:
          packages:
            yum:
              yum-cron: []
              postfix: []
              mailx: []
          files:
            /etc/danware/bastion-yum-cron.sed:
              content: !Sub |
                s|update_messages = no|update_messages = yes|
                s|download_updates = no|download_updates = yes|
                s|emit_via = stdio|emit_via = email|
                s|email_from = root|email_from = yum-cron|
                s|email_to = root|email_to = ${YumUpdateEmail}|
              mode: "000400"
              owner: root
              group: root
          commands:
            1_security-updates:
              command: |
                sed --file /etc/danware/bastion-yum-cron.sed --in-place /etc/yum/yum-cron-hourly.conf
                sed 's|update_cmd = default|update_cmd = security|' --in-place /etc/yum/yum-cron-hourly.conf
                echo Hourly security updates configured
            2_complete-updates:
              command: |
                sed --file /etc/danware/bastion-yum-cron.sed --in-place /etc/yum/yum-cron.conf
                echo Daily complete updates configured
            3_restart-yum-cron:
              command: |
                service yum-cron restart
          services:
            sysvinit:
              yum-cron:
                enabled: true
                ensureRunning: true
                packages: 
                  yum: [ yum-cron ]
              postfix:
                enabled: true
                ensureRunning: true
                packages: 
                  yum: [ postfix ]
        lamp:
          packages:
            yum:
              httpd24: []
              php70: []
              mysql56-server: []
              php70-mysqlnd: []
              mod24_ssl: []
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - httpd24
                  - mod24_ssl
              mysqld:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - mysql56-server
                  - php70-mysqlnd
        dns-hostname:
          commands:
            dns-hostname:
              command: !Sub |
                newName=${PublicDns}
                oldName=$(hostname)
                sed "s|HOSTNAME=localhost.localdomain|HOSTNAME=$newName|" --in-place /etc/sysconfig/network
                echo HOSTNAME changed from \"$oldName\" to \"$newName\"
                reboot
              test: !Sub |
                publicDns=${PublicDns}
                numChangedLines=$(cat /etc/sysconfig/network | grep "^HOSTNAME=$publicDns$" | wc -l)
                if [ $numChangedLines = 0 ] ; then
                  echo HOSTNAME will be changed to \"$publicDns\"
                  exit 0
                else
                  echo HOSTNAME is already \"$publicDns\"
                  exit 1
                fi
              ignoreErrors: true
        set-timezone:
          commands:
            set-timezone:
              command: !Sub |
                newZone=${TimeZone}
                oldZone=$(date +%Z)
                sed --regexp-extended "s|ZONE=\"(\\w*/?)+\"|ZONE=\"$newZone\"|" --in-place /etc/sysconfig/clock
                ln --symbolic --force /usr/share/zoneinfo/$newZone /etc/localtime
                echo Time zone changed from \"$oldZone\" to \"$newZone\"
                reboot
              test: !Sub |
                timeZone=${TimeZone}
                numChangedLines=$(cat /etc/sysconfig/clock | grep "^ZONE=\"$timeZone\"$" | wc -l)
                if [ $numChangedLines = 0 ] ; then
                  echo Time zone will be changed to \"$timeZone\"
                  exit 0
                else
                  echo Time zone is already \"$timeZone\"
                  exit 1
                fi
          
  # Set up DNS for the server
  EIPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      EIP: !Ref ElasticIP
      InstanceId: !Ref WordPress
  CnameRecordSet:
    Type: AWS::Route53::RecordSet
    DependsOn: EIPAssoc
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref PublicDns
      Type: CNAME
      ResourceRecords: [ !GetAtt WordPress.PublicDnsName ]
      TTL: 60
      Comment: String
      # HealthCheckId: String
      
Outputs:
  WordPress:
    Value: !GetAtt WordPress.PublicIp
    Description: The public IP address of the new WordPress server