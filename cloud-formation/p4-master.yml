AWSTemplateFormatVersion: 2010-09-09

Description: A Perforce master server in its own public subnet and automatically updated.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Subnet Configuration
        Parameters:
        - NetworkStackName
        - AzName
        - SubnetCidrBlock
        - NumIngressCidrBlocks
        - IngressCidrBlocks
        - BastionCidrBlock
      -
        Label:
          default: P4 Master Instance Configuration
        Parameters:
        - PublicDns
        - HostedZone
        - UseFreeTier
        - AmiLookupFunction
        - KeyPair
        - TimeZone
        - YumUpdateEmail

Parameters:
  NetworkStackName:
    Type: String
    Default: MainVPC
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
    Description: Name of an active CloudFormation stack that contains the networking resources needed to create a Perforce master server in its own public subnet.
    ConstraintDescription: must contain only alphanumeric characters and/or hyphens, and start with a letter
  AzName:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: The Availability Zone in which to create a public subnet for the Perforce master server.
  SubnetCidrBlock:
    Type: String
    Default: 10.0.150.0/28
    AllowedPattern: ^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}(\/\d{1,2})?$
    Description: The CIDR block for the new public subnet in the provided Availability Zone.  Block size must be between a /16 netmask and a /28 netmask.
    ConstraintDescription: must be a valid CIDR block (e.g., 10.20.114.0/24)
  NumIngressCidrBlocks:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 5
    Description: The number of CIDR blocks from which P4 requests into the P4 master server will be accepted. The actual CIDR blocks must be entered in the IngressCidrBlocks parameter.
    ConstraintDescription: must be an integer between 1 and 5 (inclusive)
  IngressCidrBlocks:
    Type: CommaDelimitedList
    Default: 0.0.0.0/0
    Description: An array of CIDR blocks that are separated by commas.  These are the actual CIDR blocks from which P4 requests will be accepted.  Allowing P4 from ANY address (0.0.0.0/0) is strongly discouraged.  The total number of CIDR blocks should be one more than the total number of commas, and must match the number entered in NumIngressCidrBlocks.
    ConstraintDescription: must be a comma-delimited list of valid CIDR blocks (e.g., 10.20.114.0/24), with no comma after the last item.
  BastionCidrBlock:
    Type: String
    Default: 10.0.128.0/24
    AllowedPattern: ^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}(\/\d{1,2})?$
    Description: This is the CIDR block from which SSH requests will be accepted.  You should only enter the CIDR block containing your bastion hosts.  Allowing SSH from ANY address (0.0.0.0/0) is strongly discouraged.
    ConstraintDescription: must be a valid CIDR block (e.g., 10.5.114.0/24).
    
  PublicDns:
    Type: String
    Default: p4.mycompany.com
    MaxLength: 255
    AllowedPattern: ^([0-9A-Za-z]+[._-]?)+[0-9A-Za-z]+$
    ConstraintDescription: must be a valid domain name, i.e., <= 255 alphanumeric characters, periods, hyphens, and underscores.
    Description: The public DNS name that will be assigned to the Perforce master server.  It must be a subdomain of a hosted zone that has already been created in AWS.
  HostedZone:
    Type: AWS::Route53::HostedZone::Id
    Description: The hosted zone in which the new Perforce master server's CNAME record will be stored.
  UseFreeTier:
    Type: String
    Default: true
    AllowedValues: [ true, false ]
    Description: If true, the Perforce master server will use an EC2 instance type that is free-tier eligible.
  AmiLookupFunctionArn:
    Type: String
    Default: arn:aws:lambda:REGION:ACCOUNT_ID:function:RegionLookup
    Description: ARN of a Lambda function that can return the latest AMIs for this region.  Replace "REGION" and "ACCOUNT_ID" with appropriate values, and the function name if applicable.
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The EC2 key pair needed to connect to all new Perforce servers.
  TimeZone:
    Type: String
    Default: UTC
    Description: Name of a time zone data file in /usr/share/zoneinfo (for example "America/New_York").  Used to set the time zone for the Perforce master server.
  YumUpdateEmail:
    Type: String
    Default: admin@mycompany.com
    MaxLength: 255
    AllowedPattern: ^([0-9A-Za-z]+[._-]?)+[0-9A-Za-z]+@([0-9A-Za-z]+[._-]?)+\.[0-9A-Za-z]+$
    ConstraintDescription: must be a valid Email address, like "frodo@theshire.com".
    Description: Email to which notifications from automatic yum updates will be sent.  These notifications will only indicate that updates have been downloaded; the updates will still have to be installed manually.
  
Conditions:
  IngressCidr5: !Equals [ !Ref NumIngressCidrBlocks, 5 ]
  IngressCidr4: !Or [ !Equals [ !Ref NumIngressCidrBlocks, 4 ], !Condition IngressCidr5]
  IngressCidr3: !Or [ !Equals [ !Ref NumIngressCidrBlocks, 3 ], !Condition IngressCidr4]
  IngressCidr2: !Or [ !Equals [ !Ref NumIngressCidrBlocks, 2 ], !Condition IngressCidr3]
  IngressCidr1: !Or [ !Equals [ !Ref NumIngressCidrBlocks, 1 ], !Condition IngressCidr2]
  FreeTier: !Equals [ !Ref UseFreeTier, true ]
    
Resources:
  # Define the new public subnet
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue MainVPC
      AvailabilityZone: !Ref AzName
      CidrBlock: !Ref SubnetCidrBlock
      MapPublicIpOnLaunch: true
  RTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !ImportValue PublicRouteTable
      SubnetId: !Ref Subnet
  ACLAssoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PubACL
      SubnetId: !Ref Subnet
      
  # Define the EC2 instance
  AmiLookup:
    Type: Custom::AmiLookup
    Properties:
      ServiceToken: !Ref AmiLookupFunctionArn
      Region: !Ref "AWS::Region"
      AmiLookupType: amzn-linux
      InstanceType: !If [FreeTier, t2.micro, m4.large]
  P4Master:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: false
      EbsOptimized: false
      ImageId: !GetAtt AmiLookup.ImageId
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: !If [FreeTier, t2.micro, m4.large]
      KeyName: !Ref KeyPair
      Monitoring: true
      NetworkInterfaces:
      - DeviceIndex: 0
        AssociatePublicIpAddress: true
        DeleteOnTermination: true
        GroupSet: [ !Ref PerforceSG ]
        SubnetId: !Ref Subnet
        Description: Network interface for the Perforce master server
      SourceDestCheck: true
      Tenancy: default
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          
          # Add a newline to the ec2-user prompt string
          echo
          echo Adding a new line to the bash prompt...
          echo PS1="\"\\n\$PS1\"">> /home/ec2-user/.bashrc
          echo Success!
          
          # Adjust time zone
          echo
          echo Adjusting time zone to ${TimeZone}...
          sed -ir "s|ZONE=\"UTC\"|ZONE=\"${TimeZone}\"|" /etc/sysconfig/clock
          ln -sf /usr/share/zoneinfo/${TimeZone} /etc/localtime
          echo Success!
          
          # Adjust hostname to match the provided public DNS name
          echo
          echo Adjusting HOSTNAME to match the provided public DNS name
          sed -i "s|HOSTNAME=localhost.localdomain|HOSTNAME=${PublicDns}|" /etc/sysconfig/network
          echo Success!
          
          # Install yum-cron to do automatic yum updates
          # and postfix (a secure Mail Transfer Agent) and mailx to do email notifications
          echo
          echo Installing the yum-cron package...
          yum install -y -q yum-cron    # -y and -q options must be separated for yum
          echo Installing the postfix and mailx packages...
          yum install -y -q postfix     # -y and -q options must be separated for yum
          yum install -y -q mailx
          echo Success!
          
          # Configure hourly security updates and daily complete updates
          cat > yum-cron-conf.sed <<- EOB
          s|update_messages = no|update_messages = yes|
          s|download_updates = no|download_updates = yes|
          # s|apply_updates = no|apply_updates = yes|
          s|system_name = None|system_name = ${AWS::StackName}|
          s|emit_via = stdio|emit_via = email|
          s|email_from = root|email_from = yum-cron|
          s|email_to = root|email_to = ${YumUpdateEmail}|
          EOB
          echo
          echo Configuring hourly security updates...
          sed -i "s|update_cmd = default|update_cmd = security|" /etc/yum/yum-cron-hourly.conf
          sed -i -f yum-cron-conf.sed /etc/yum/yum-cron-hourly.conf
          echo Configuring  daily complete updates...
          sed -i -f yum-cron-conf.sed /etc/yum/yum-cron.conf
          rm yum-cron-conf.sed
          echo Success!
          
          # Make sure yum-cron and postfix start after all future reboots
          echo
          echo Registering yum-cron to start on every reboot...
          chkconfig yum-cron on
          echo Registering postfix to start on every reboot...
          chkconfig postfix on
          echo Success!
          
          # Clean yum and reboot to make sure everything's cool B)
          echo
          echo Rebooting...
          yum clean all
          reboot
          echo Success!
          
  # Give it a public DNS hostname
  CnameRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref PublicDns
      Type: CNAME
      ResourceRecords: [ !GetAtt P4Master.PublicDnsName ]
      TTL: 60
      Comment: String
      # HealthCheckId: String
  
  # Place an Elastic File System in the new subnet
  SharedFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
  SharedFSMountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref SharedFileSystem
      SecurityGroups: [ !Ref MountTargetSG ]
      SubnetId: !Ref Subnet
  MountTargetSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue MainVPC
      GroupDescription: Allow NFS access from the Perforce master server.
  MountTargetNsfIngressSgRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MountTargetSG
      SourceSecurityGroupId: !Ref PerforceSG
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
  
  # Network ACL for the new public subnet(s)
  PubACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !ImportValue MainVPC
  InEphemeralAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 100
      Egress: false
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 1024, To: 65535 }
      CidrBlock: 0.0.0.0/0
  InIcmpAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 110
      Egress: false
      RuleAction: allow
      Protocol: 1
      Icmp: { Code: -1, Type: -1 }
      CidrBlock: 0.0.0.0/0
  InHttpAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 120
      Egress: false
      RuleAction: allow
      Protocol: 6
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 80, To: 80 }
  InNtpAcl:     # Both outbound and inbound ACL entries required
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 130
      Egress: false
      RuleAction: allow
      Protocol: 17
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 123, To: 123 }
  OutEphemeralAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 100
      Egress: true
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 1024, To: 65535 }
      CidrBlock: 0.0.0.0/0
  OutIcmpAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 110
      Egress: true
      RuleAction: allow
      Protocol: 1
      Icmp: { Code: -1, Type: -1 }
      CidrBlock: 0.0.0.0/0
  OutHttpAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 120
      Egress: true
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 80, To: 80 }
      CidrBlock: 0.0.0.0/0
  OutNtpAcl:     # Both outbound and inbound ACL entries required
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 130
      Egress: true
      RuleAction: allow
      Protocol: 17
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 123, To: 123 }
  OutSmtpAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 140
      Egress: true
      RuleAction: allow
      Protocol: 6
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 25, To: 25 }
      
  # SSH/P4 ingress ACL rules
  InSshAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 140
      Egress: false
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 22, To: 22 }
      CidrBlock: !Ref BastionCidrBlock
  InP4Acl1:
    Condition: IngressCidr1
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 151
      Egress: false
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 1666, To: 1666 }
      CidrBlock: !Select [ 0, !Ref IngressCidrBlocks ]
  InP4Acl2:
    Condition: IngressCidr2
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 152
      Egress: false
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 1666, To: 1666 }
      CidrBlock: !Select [ 1, !Ref IngressCidrBlocks ]
  InP4Acl3:
    Condition: IngressCidr3
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 153
      Egress: false
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 1666, To: 1666 }
      CidrBlock: !Select [ 2, !Ref IngressCidrBlocks ]
  InP4Acl4:
    Condition: IngressCidr4
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 154
      Egress: false
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 1666, To: 1666 }
      CidrBlock: !Select [ 3, !Ref IngressCidrBlocks ]
  InP4Acl5:
    Condition: IngressCidr5
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 155
      Egress: false
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 1666, To: 1666 }
      CidrBlock: !Select [ 4, !Ref IngressCidrBlocks ]

  # P4 egress ACL rules
  OutP4Acl1:
    Condition: IngressCidr1
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 151
      Egress: true
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 1666, To: 1666 }
      CidrBlock: !Select [ 0, !Ref IngressCidrBlocks ]
  OutP4Acl2:
    Condition: IngressCidr2
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 152
      Egress: true
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 1666, To: 1666 }
      CidrBlock: !Select [ 1, !Ref IngressCidrBlocks ]
  OutP4Acl3:
    Condition: IngressCidr3
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 153
      Egress: true
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 1666, To: 1666 }
      CidrBlock: !Select [ 2, !Ref IngressCidrBlocks ]
  OutP4Acl4:
    Condition: IngressCidr4
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 154
      Egress: true
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 1666, To: 1666 }
      CidrBlock: !Select [ 3, !Ref IngressCidrBlocks ]
  OutP4Acl5:
    Condition: IngressCidr5
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 155
      Egress: true
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 1666, To: 1666 }
      CidrBlock: !Select [ 4, !Ref IngressCidrBlocks ]
      
  # Security Group for the Perforce master server
  PerforceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue MainVPC
      GroupDescription: Allow Perforce traffic and boilerplate traffic for keeping the instance up-to-date.
      SecurityGroupIngress:
      - # ICMP traffic from anywhere
        IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - # ICMP traffic to anywhere
        IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      - # HTTP for automatic updates
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - # NTP to synchronize UTC time with a pool of public servers (only outbound rule required)
        IpProtocol: udp
        FromPort: 123
        ToPort: 123
        CidrIp: 0.0.0.0/0
      - # SMTP to send cron output
        IpProtocol: tcp
        FromPort: 25
        ToPort: 25
        CidrIp: 0.0.0.0/0
      - # NFS to shared Elastic File System
        IpProtocol: tcp
        FromPort: 2049
        ToPort: 2049
        SourceSecurityGroupId: !Ref MountTargetSG
  IngressFromSameSgRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref PerforceSG
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PerforceSG
  EgressToSameSgRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref PerforceSG
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PerforceSG
        
  # SSH/RDP ingress security group rules
  SshIngressSgRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref PerforceSG
      CidrIp: !Ref BastionCidrBlock
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
  P4IngressSgRule1:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IngressCidr1
    Properties:
      GroupId: !Ref PerforceSG
      CidrIp: !Select [ 0, !Ref IngressCidrBlocks ]
      IpProtocol: tcp
      FromPort: 1666
      ToPort: 1666
  P4IngressSgRule2:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IngressCidr2
    Properties:
      GroupId: !Ref PerforceSG
      CidrIp: !Select [ 1, !Ref IngressCidrBlocks ]
      IpProtocol: tcp
      FromPort: 1666
      ToPort: 1666
  P4IngressSgRule3:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IngressCidr3
    Properties:
      GroupId: !Ref PerforceSG
      CidrIp: !Select [ 2, !Ref IngressCidrBlocks ]
      IpProtocol: tcp
      FromPort: 1666
      ToPort: 1666
  P4IngressSgRule4:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IngressCidr4
    Properties:
      GroupId: !Ref PerforceSG
      CidrIp: !Select [ 3, !Ref IngressCidrBlocks ]
      IpProtocol: tcp
      FromPort: 1666
      ToPort: 1666
  P4IngressSgRule5:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: IngressCidr5
    Properties:
      GroupId: !Ref PerforceSG
      CidrIp: !Select [ 4, !Ref IngressCidrBlocks ]
      IpProtocol: tcp
      FromPort: 1666
      ToPort: 1666
  
  # SSH/RDP egress security group rules
  SshEgressSgRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref PerforceSG
      CidrIp: !Ref BastionCidrBlock
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
  P4EgressSgRule1:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: IngressCidr1
    Properties:
      GroupId: !Ref PerforceSG
      CidrIp: !Select [ 0, !Ref IngressCidrBlocks ]
      IpProtocol: tcp
      FromPort: 1666
      ToPort: 1666
  P4EgressSgRule2:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: IngressCidr2
    Properties:
      GroupId: !Ref PerforceSG
      CidrIp: !Select [ 1, !Ref IngressCidrBlocks ]
      IpProtocol: tcp
      FromPort: 1666
      ToPort: 1666
  P4EgressSgRule3:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: IngressCidr3
    Properties:
      GroupId: !Ref PerforceSG
      CidrIp: !Select [ 2, !Ref IngressCidrBlocks ]
      IpProtocol: tcp
      FromPort: 1666
      ToPort: 1666
  P4EgressSgRule4:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: IngressCidr4
    Properties:
      GroupId: !Ref PerforceSG
      CidrIp: !Select [ 3, !Ref IngressCidrBlocks ]
      IpProtocol: tcp
      FromPort: 1666
      ToPort: 1666
  P4EgressSgRule5:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: IngressCidr5
    Properties:
      GroupId: !Ref PerforceSG
      CidrIp: !Select [ 4, !Ref IngressCidrBlocks ]
      IpProtocol: tcp
      FromPort: 1666
      ToPort: 1666
          
Outputs:
  P4NetworkACL:
    Value: !Ref PubACL
    Export: { Name: P4NetworkACL }
    Description: ID of the Perforce master server network ACL
  P4SecurityGroup:
    Value: !Ref PerforceSG
    Export: { Name: P4SecurityGroup }
    Description: ID of the Perforce master server security group
  P4MasterServer:
    Value: !GetAtt P4Master.PublicIp
    Description: The public IP address of the Perforce master server