AWSTemplateFormatVersion: 2010-09-09

Description: A new bastion host in its own public subnet, automatically updated, and optionally OS-hardened.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Subnet Configuration
        Parameters:
        - NetworkStackName
        - SecurityStackName
        - AzName
        - SubnetCidrBlock
      - Label:
          default: Bastion Host Instance Configuration
        Parameters:
        - AmiLookupFunction
        - HardenOS
        - KeyPair

Parameters:
  NetworkStackName:
    Type: String
    Default: MainVPC
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
    Description: Name of an active CloudFormation stack that contains the networking resources needed to create a bastion host in its own public subnet.
    ConstraintDescription: must contain only alphanumeric characters and/or hyphens, and start with a letter
  SecurityStackName:
    Type: String
    Default: BastionSecurity
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
    Description: Name of an active CloudFormation stack that contains the security group and network ACL rules for a bastion host.
    ConstraintDescription: must contain only alphanumeric characters and/or hyphens, and start with a letter
  AzName:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: The Availability Zone in which to create a public subnet for the new bastion host.
  SubnetCidrBlock:
    Type: String
    Default: 10.0.128.0/28
    AllowedPattern: ^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}(\/\d{1,2})?$
    Description: The CIDR block for the new public subnet in the provided Availability Zone.
    ConstraintDescription: must be a valid CIDR block (e.g., 52.20.114.0/24)
  
  AmiLookupFunction:
    Type: String
    Default: AMILookup
    Description: Name of a Lambda function that can return the latest AMI matching a set of search parameters.  The function must be in the same account and region as this stack.
  HardenOS:
    Type: String
    Default: true
    AllowedValues: [ true, false]
    Description: Hardened bastion hosts will use the latest CIS AMI to improve security.  Unhardened hosts will use the latest Amazon Linux AMI.
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The EC2 key pair needed to connect to all new bastion hosts.
  
Conditions:
  Harden: !Equals [ !Ref HardenOS, true ]
  
Resources:  
  # Define the new public subnet
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue MainVPC
      AvailabilityZone: !Ref AzName
      CidrBlock: !Ref SubnetCidrBlock
      MapPublicIpOnLaunch: true
  RTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !ImportValue PublicRouteTable
      SubnetId: !Ref Subnet
  ACLAssoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !ImportValue BastionNetworkACL
      SubnetId: !Ref Subnet
          
  # Define the EC2 instance
  AMIInfo:
    Type: Custom::AMIInfo
    Properties:
      ServiceToken: !Join [ ":", [ "arn:aws:lambda", !Ref "AWS::Region", !Ref "AWS::AccountId", "function", !Ref AmiLookupFunction ] ]
      Region: !Ref "AWS::Region"
      AmiLookupType: amzn-linux
      InstanceType: !If [Harden, t2.micro, t2.nano]
    
  Bastion:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: false
      EbsOptimized: false
      ImageId: !GetAtt AMIInfo.Id
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: !If [ Harden, t2.micro, t2.nano ]
      KeyName: !Ref KeyPair
      Monitoring: true
      NetworkInterfaces:
      - DeviceIndex: 0
        AssociatePublicIpAddress: true
        DeleteOnTermination: true
        GroupSet: [ !ImportValue BastionSecurityGroup ]
        SubnetId: !Ref Subnet
        Description: Network interface for a bastion host
      SourceDestCheck: true
      Tenancy: default
          
Outputs:
  Bastion:
    Value: !GetAtt Bastion.PublicIp
    Description: The public IP address of the new bastion host