AWSTemplateFormatVersion: 2010-09-09

Description: An S3 bucket for bucket access logs

Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups:
    -
      Parameters:
      - OrganizationPrefix
      - DaysToInfrequentAccess
      - DaysToExpire

Parameters:
  OrganizationPrefix:
    Type: String
    Default: "mycompany"
    AllowedPattern: ^[\w+=,.@-]*$
    Description: A prefix to append to all bucket names and IAM principals (e.g., "mycompany")
    ConstraintDescription: "must be a string of upper and lowercase alphanumeric characters with no spaces, and any of the following characters: =,.@-.  Note that group names are not distinguished by case."
  DaysToInfrequentAccess:
    Type: Number
    Default: 30
    MinValue: 0
    Description: Indicates the number of days after creation when log objects are transitioned to the Infrequent Access storage class.  A value of zero will transition objects immediately.
    ConstraintDescription: must be non-negative integer.
  DaysToExpire:
    Type: Number
    Default: 60
    MinValue: 0
    Description: Indicates the number of days after creation when log objects are deleted from Amazon S3 and Amazon Glacier.  Must be longer than the DaysToInfrequentAccess time.
    ConstraintDescription: must be non-negative integer.

Resources:
  # S3 bucket for logs
  LogsBucket:
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: LogDeliveryWrite  # Required by CloudFormation apparently?
      BucketName: !Sub ${OrganizationPrefix}-${AWS::Region}-logs
      LifecycleConfiguration:
        Rules:
        -
          Id: TransitionExpireLogs
          Status: Enabled
          ExpirationInDays: !Ref DaysToExpire
          Transitions:
          - { StorageClass: STANDARD_IA, TransitionInDays: !Ref DaysToInfrequentAccess }
      LoggingConfiguration:
        LogFilePrefix: log-bucket/
  LogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - # Allow anybody to do any S3 action on the Logs bucket, as long as they use TLS/SSL
            Sid: AnyS3ActionOverSSL
            Effect: Allow
            Principal: { AWS: !Ref "AWS::AccountId" }
            Action: s3:*
            Resource: !Sub arn:aws:s3:::${OrganizationPrefix}-${AWS::Region}-logs
            Condition:
              Bool: { "aws:SecureTransport": true }
        
Outputs:
  LogsBucket:
    Value: !Ref LogsBucket
    Description: Name of the new S3 logs bucket.
    Export: { Name: LogsBucket }