AWSTemplateFormatVersion: 2010-09-09

Description: A new bastion host in a public subnet that is termination-protected, automatically updated, and optionally OS-hardened.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Subnet Configuration
        Parameters:
        - NetworkStackName
        - AzName
        - CidrBlock
      - Label:
          default: Bastion Host Instance Configuration
        Parameters:
        - PublicDns
        - HostedZoneId
        - HardenOS
        - CreateNewSecurityGroup
        - BastionSecurityGroupId
        - KeyPair
        - TimeZone
        - YumUpdateEmail

Parameters:
  NetworkStackName:
    Type: String
    Default: MainVPC
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
    Description: Name of an active CloudFormation stack that contains the networking resources needed to create a bastion host in its own public subnet.
    ConstraintDescription: must contain only alphanumeric characters and/or hyphens, and start with a letter
  AzName:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: The Availability Zone in which to create a public subnet for the new bastion host.
  CidrBlock:
    Type: String
    Default: 10.0.128.0/24
    Description: The CIDR block for the new public subnet in the provided Availability Zone.
   
  PublicDns:
    Type: String
    Default: bastion.mycompany.com
    MaxLength: 255
    AllowedPattern: ^([0-9A-Za-z]+[._-]?)+[0-9A-Za-z]+$
    ConstraintDescription: must be a valid domain name, i.e., <= 255 alphanumeric characters, periods, hyphens, and underscores.
    Description: The public DNS name that will be assigned to the new bastion host.  It must be a subdomain of a hosted zone that has already been created in AWS.
  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: The hosted zone in which the new bastion host's CNAME record will be stored.
  HardenOS:
    Type: String
    Default: true
    AllowedValues: [ true, false]
    Description: Hardened bastion hosts will use the latest CIS AMI to improve security.  Unhardened hosts will use the latest Amazon Linux AMI.
  CreateNewSecurityGroup:
    Type: String
    Default: true
    AllowedValues: [ true, false]
    Description: Set to true if you want to create a new security group for the new bastion host.  If true, then the provided security group ID will be ignored.
  BastionSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: REQUIRED!  The Security Group for the new bastion host.  If you want to create a new Security Group, then set CreateNewSecurityGroup to true (the value here will be ignored).  New Security Groups will allow SSH ingress from authorized networks, SSH egress to private networks, HTTP egress for automatic updates, and NTP egress for timezone synchronization.  If you are not creating a new subnet, then make sure that the provided subnet's ACL also allows these types of traffic!
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The EC2 key pair needed to connect to all new bastion hosts.
  TimeZone:
    Type: String
    Default: UTC
    Description: Name of a time zone data file in /usr/share/zoneinfo (for example "America/New_York").  Used to set the time zone for the bastion hosts.
  YumUpdateEmail:
    Type: String
    Default: admin@mycompany.com
    MaxLength: 255
    AllowedPattern: ^([0-9A-Za-z]+[._-]?)+[0-9A-Za-z]+@([0-9A-Za-z]+[._-]?)+\.[0-9A-Za-z]+$
    ConstraintDescription: must be a valid Email address, like "frodo@theshire.com".
    Description: Email to which notifications from automatic yum updates will be sent.  These notifications will only indicate that updates have been downloaded; the updates will still have to be installed manually.
  
Conditions:
  CreateSG: !Equals [ !Ref CreateNewSecurityGroup, true ]
  Harden: !Equals [ !Ref HardenOS, true ]
  
Mappings:
  AmiMap:
    # Harden AMI is "CIS Amazon Linux Benchmark v2.0.0.1 - Level 1" v2.0.0.1
    # Don't harden AMI is "Amazon Linux AMI (HVM / 64-bit)" v2016.09.1.20161221
    
    us-east-1:        # N. Virginia
      harden:     ami-733a0c64
      dontHarden: ami-9be6f38c
    us-east-2:        # Ohio
      harden:     ami-fa653f9f
      dontHarden: ami-38cd975d
    us-west-1:        # N. California
      harden:     ami-5f3f6b3f
      dontHarden: ami-b73d6cd7
    us-west-2:        # Oregon
      harden:     ami-2347eb43
      dontHarden: ami-1e299d7e
    eu-west-1:        # Ireland
      harden:     ami-f52f7286
      dontHarden: ami-c51e3eb6
    eu-central-1:     #Frankfurt
      harden:     ami-949450fb
      dontHarden: ami-211ada4e
    ap-northeast-1:   # Tokyo
      harden:     ami-69db6f08
      dontHarden: ami-9f0c67f8
    ap-northeast-2:   # Seoul
      harden:     ami-20a0774e
      dontHarden: ami-94bb6dfa
    ap-southeast-1:   # Singapore
      harden:     ami-4f892b2c
      dontHarden: ami-4dd6782e
    ap-southeast-2:   # Sydney
      harden:     ami-620f3101
      dontHarden: ami-28cff44b
    ap-south-1:       # Mumbai
      harden:     ami-c53146aa
      dontHarden: ami-9fc7b0f0
    sa-east-1:        # Sao Paulo
      harden:     ami-dce876b0
      dontHarden: ami-bb40d8d7
    ca-central-1:     # Central Canada
      harden:     ami-eb20928f          # CIS AMI not supported in Canada yet
      dontHarden: ami-eb20928f
    
Resources:
  # Route Table for the new public subnet(s)
  PubRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !ImportValue MainVPC
  InternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !ImportValue MainIGW
      RouteTableId: !Ref PubRT
  
  # Network ACL for the new public subnet(s)
  PubACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !ImportValue MainVPC
  InEphemeraAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 100
      Egress: false
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 1024, To: 65535 }
      CidrBlock: 0.0.0.0/0
  InIcmpAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 110
      Egress: false
      RuleAction: allow
      Protocol: 1
      Icmp: { Code: -1, Type: -1 }
      CidrBlock: 0.0.0.0/0
  InHttpAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 120
      Egress: false
      RuleAction: allow
      Protocol: 6
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 80, To: 80 }
  InNtpAcl:     # Both outbound and inbound ACL entries required
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 130
      Egress: false
      RuleAction: allow
      Protocol: 17
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 123, To: 123 }
  InSshAcl1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 140
      Egress: false
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 22, To: 22 }
      CidrBlock: 107.218.90.121/32
  InSshAcl2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 141
      Egress: false
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 22, To: 22 }
      CidrBlock: 130.101.99.0/24
  InSshAcl3:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 142
      Egress: false
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 22, To: 22 }
      CidrBlock: 10.0.128.0/17

  OutEphemeraAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 100
      Egress: true
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 1024, To: 65535 }
      CidrBlock: 0.0.0.0/0
  OutIcmpAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 110
      Egress: true
      RuleAction: allow
      Protocol: 1
      Icmp: { Code: -1, Type: -1 }
      CidrBlock: 0.0.0.0/0
  OutHttpAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 120
      Egress: true
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 80, To: 80 }
      CidrBlock: 0.0.0.0/0
  OutNtpAcl:     # Both outbound and inbound ACL entries required
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 130
      Egress: true
      RuleAction: allow
      Protocol: 17
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 123, To: 123 }
  OutSmtpAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 140
      Egress: true
      RuleAction: allow
      Protocol: 6
      CidrBlock: 0.0.0.0/0
      PortRange: { From: 25, To: 25 }
  OutSshAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PubACL
      RuleNumber: 150
      Egress: true
      RuleAction: allow
      Protocol: 6
      PortRange: { From: 22, To: 22 }
      CidrBlock: 10.0.0.0/16
  
  # Define the requested number of subnets
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue MainVPC
      AvailabilityZone: !Ref AzName
      CidrBlock: !Ref CidrBlock
      MapPublicIpOnLaunch: true
  RTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PubRT
      SubnetId: !Ref Subnet
  ACLAssoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PubACL
      SubnetId: !Ref Subnet
  
  # Security Group for the bastion hosts
  NewBastionSG:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateSG
    Properties:
      VpcId: !ImportValue MainVPC
      GroupDescription: Allow SSH access from authorized computers, and SSH access to private subnets.  Also allow HTTP for automatic updates and NTP for clock synchronization.
      SecurityGroupIngress:
      - # ICMP traffic from anywhere
        IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      - # SSH from Vicarel home
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 107.218.90.0/24
      - # SSH from Renna lab
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 130.101.99.0/24
      - # SSH from public subnets
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.0.128.0/17
      SecurityGroupEgress:
      - # SSH into private subnets
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.0.0.0/16
      - # HTTP for automatic updates
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - # NTP to synchronize UTC time with a pool of public servers (only outbound rule required)
        IpProtocol: udp
        FromPort: 123
        ToPort: 123
        CidrIp: 0.0.0.0/0
      - # SMTP to send cron output
        IpProtocol: tcp
        FromPort: 25
        ToPort: 25
        CidrIp: 0.0.0.0/0
  IngressFromSameSgRule:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateSG
    Properties:
      GroupId: !GetAtt NewBastionSG.GroupId
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt NewBastionSG.GroupId
  EgressToSameSgRule:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: CreateSG
    Properties:
      GroupId: !GetAtt NewBastionSG.GroupId
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt NewBastionSG.GroupId
          
  # Define the EC2 instance
  Bastion:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: true
      EbsOptimized: false
      ImageId: !If [ Harden, !FindInMap [AmiMap, !Ref "AWS::Region", harden], !FindInMap [AmiMap, !Ref "AWS::Region", dontHarden] ]
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: !If [Harden, t2.micro, t2.nano]
      KeyName: !Ref KeyPair
      Monitoring: true
      NetworkInterfaces:
      - DeviceIndex: 0
        AssociatePublicIpAddress: true
        DeleteOnTermination: true
        GroupSet:
        - !If [ CreateSG, !Ref NewBastionSG, !Ref BastionSecurityGroupId ]
        SubnetId: !Ref Subnet
        Description: Network interface for a bastion host
      SourceDestCheck: true
      Tenancy: default
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          
          # Add a newline to the ec2-user prompt string
          echo
          echo Adding a new line to the bash prompt...
          echo PS1="\"\\n\$PS1\"">> /home/ec2-user/.bashrc
          echo Success!
          
          # Adjust time zone
          echo
          echo Adjusting time zone to ${TimeZone}...
          sed -ir "s|ZONE=\"UTC\"|ZONE=\"${TimeZone}\"|" /etc/sysconfig/clock
          ln -sf /usr/share/zoneinfo/${TimeZone} /etc/localtime
          echo Success!
          
          # Adjust hostname to match the provided public DNS name
          echo
          echo Adjusting HOSTNAME to match the provided public DNS name
          sed -i "s|HOSTNAME=localhost.localdomain|HOSTNAME=${PublicDns}|" /etc/sysconfig/network
          echo Success!
          
          # Install yum-cron to do automatic yum updates
          # and postfix (a secure Mail Transfer Agent) and mailx to do email notifications
          echo
          echo Installing the yum-cron package...
          yum install -y -q yum-cron    # -y and -q options must be separated for yum
          echo Installing the postfix and mailx packages...
          yum install -y -q postfix     # -y and -q options must be separated for yum
          yum install -y -q mailx
          echo Success!
          
          # Configure hourly security updates and daily complete updates
          cat > yum-cron-conf.sed <<- EOB
          s|update_messages = no|update_messages = yes|
          s|download_updates = no|download_updates = yes|
          # s|apply_updates = no|apply_updates = yes|
          s|system_name = None|system_name = ${AWS::StackName}|
          s|emit_via = stdio|emit_via = email|
          s|email_from = root|email_from = yum-cron|
          s|email_to = root|email_to = ${YumUpdateEmail}|
          EOB
          echo
          echo Configuring hourly security updates...
          sed -i "s|update_cmd = default|update_cmd = security|" /etc/yum/yum-cron-hourly.conf
          sed -i -f yum-cron-conf.sed /etc/yum/yum-cron-hourly.conf
          echo Configuring  daily complete updates...
          sed -i -f yum-cron-conf.sed /etc/yum/yum-cron.conf
          rm yum-cron-conf.sed
          echo Success!
          
          # Make sure yum-cron and postfix start after all future reboots
          echo
          echo Registering yum-cron to start on every reboot...
          chkconfig yum-cron on
          echo Registering postfix to start on every reboot...
          chkconfig postfix on
          echo Success!
          
          # Clean yum and reboot to make sure everything's cool B)
          echo
          echo Rebooting...
          yum clean all
          reboot
          echo Success!
          
  # Give it a public DNS hostname
  CnameRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref PublicDns
      Type: A
      ResourceRecords: [ !GetAtt Bastion.PublicIp ]
      TTL: 60
      Comment: String
      # HealthCheckId: String
          
Outputs:
  Bastion:
    Value: !GetAtt Bastion.PublicIp
    Description: The public IP address of the new bastion host