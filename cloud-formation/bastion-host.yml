AWSTemplateFormatVersion: 2010-09-09

Description: A new bastion host in its own public subnet, automatically updated, and optionally OS-hardened.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Subnet Configuration
        Parameters:
        - NetworkStackName
        - SecurityStackName
        - AzName
        - SubnetCidrBlock
      - Label:
          default: Bastion Host Instance Configuration
        Parameters:
        - PublicDns
        - HostedZone
        - HardenOS
        - KeyPair
        - TimeZone
        - YumUpdateEmail

Parameters:
  NetworkStackName:
    Type: String
    Default: MainVPC
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
    Description: Name of an active CloudFormation stack that contains the networking resources needed to create a bastion host in its own public subnet.
    ConstraintDescription: must contain only alphanumeric characters and/or hyphens, and start with a letter
  SecurityStackName:
    Type: String
    Default: BastionSecurity
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
    Description: Name of an active CloudFormation stack that contains the security group and network ACL rules for a bastion host.
    ConstraintDescription: must contain only alphanumeric characters and/or hyphens, and start with a letter
  AzName:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: The Availability Zone in which to create a public subnet for the new bastion host.
  SubnetCidrBlock:
    Type: String
    Default: 10.0.128.0/24
    AllowedPattern: ^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}(\/\d{1,2})?$
    Description: The CIDR block for the new public subnet in the provided Availability Zone.
    ConstraintDescription: must be a valid CIDR block (e.g., 52.20.114.0/24)
  
  PublicDns:
    Type: String
    Default: bastion.mycompany.com
    MaxLength: 255
    AllowedPattern: ^([0-9A-Za-z]+[._-]?)+[0-9A-Za-z]+$
    ConstraintDescription: must be a valid domain name, i.e., <= 255 alphanumeric characters, periods, hyphens, and underscores.
    Description: The public DNS name that will be assigned to the new bastion host.  It must be a subdomain of a hosted zone that has already been created in AWS.
  HostedZone:
    Type: AWS::Route53::HostedZone::Id
    Description: The hosted zone in which the new bastion host's CNAME record will be stored.
  HardenOS:
    Type: String
    Default: true
    AllowedValues: [ true, false]
    Description: Hardened bastion hosts will use the latest CIS AMI to improve security.  Unhardened hosts will use the latest Amazon Linux AMI.
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The EC2 key pair needed to connect to all new bastion hosts.
  TimeZone:
    Type: String
    Default: UTC
    Description: Name of a time zone data file in /usr/share/zoneinfo (for example "America/New_York").  Used to set the time zone for the bastion hosts.
  YumUpdateEmail:
    Type: String
    Default: admin@mycompany.com
    MaxLength: 255
    AllowedPattern: ^([0-9A-Za-z]+[._-]?)+[0-9A-Za-z]+@([0-9A-Za-z]+[._-]?)+\.[0-9A-Za-z]+$
    ConstraintDescription: must be a valid Email address, like "frodo@theshire.com".
    Description: Email to which notifications from automatic yum updates will be sent.  These notifications will only indicate that updates have been downloaded; the updates will still have to be installed manually.
  
Conditions:
  Harden: !Equals [ !Ref HardenOS, true ]
  
Mappings:
  AmiMap:
    # Harden AMI is "CIS Amazon Linux Benchmark v2.0.0.1 - Level 1" v2.0.0.1
    # Don't harden AMI is "Amazon Linux AMI (HVM / 64-bit)" v2016.09.1.20161221
    
    us-east-1:        # N. Virginia
      harden:     ami-733a0c64
      dontHarden: ami-9be6f38c
    us-east-2:        # Ohio
      harden:     ami-fa653f9f
      dontHarden: ami-38cd975d
    us-west-1:        # N. California
      harden:     ami-5f3f6b3f
      dontHarden: ami-b73d6cd7
    us-west-2:        # Oregon
      harden:     ami-2347eb43
      dontHarden: ami-1e299d7e
    eu-west-1:        # Ireland
      harden:     ami-f52f7286
      dontHarden: ami-c51e3eb6
    eu-central-1:     #Frankfurt
      harden:     ami-949450fb
      dontHarden: ami-211ada4e
    ap-northeast-1:   # Tokyo
      harden:     ami-69db6f08
      dontHarden: ami-9f0c67f8
    ap-northeast-2:   # Seoul
      harden:     ami-20a0774e
      dontHarden: ami-94bb6dfa
    ap-southeast-1:   # Singapore
      harden:     ami-4f892b2c
      dontHarden: ami-4dd6782e
    ap-southeast-2:   # Sydney
      harden:     ami-620f3101
      dontHarden: ami-28cff44b
    ap-south-1:       # Mumbai
      harden:     ami-c53146aa
      dontHarden: ami-9fc7b0f0
    sa-east-1:        # Sao Paulo
      harden:     ami-dce876b0
      dontHarden: ami-bb40d8d7
    ca-central-1:     # Central Canada
      harden:     ami-eb20928f          # CIS AMI not supported in Canada yet
      dontHarden: ami-eb20928f
    
Resources:  
  # Define the new public subnet
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue MainVPC
      AvailabilityZone: !Ref AzName
      CidrBlock: !Ref SubnetCidrBlock
      MapPublicIpOnLaunch: true
  RTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !ImportValue PublicRouteTable
      SubnetId: !Ref Subnet
  ACLAssoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !ImportValue BastionNetworkACL
      SubnetId: !Ref Subnet
          
  # Define the EC2 instance
  Bastion:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: false
      EbsOptimized: false
      ImageId: !If [ Harden, !FindInMap [AmiMap, !Ref "AWS::Region", harden], !FindInMap [AmiMap, !Ref "AWS::Region", dontHarden] ]
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: !If [Harden, t2.micro, t2.nano]
      KeyName: !Ref KeyPair
      Monitoring: true
      NetworkInterfaces:
      - DeviceIndex: 0
        AssociatePublicIpAddress: true
        DeleteOnTermination: true
        GroupSet: [ !ImportValue BastionSecurityGroup ]
        SubnetId: !Ref Subnet
        Description: Network interface for a bastion host
      SourceDestCheck: true
      Tenancy: default
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          
          # Add a newline to the ec2-user prompt string
          echo
          echo Adding a new line to the bash prompt...
          echo PS1="\"\\n\$PS1\"">> /home/ec2-user/.bashrc
          echo Success!
          
          # Adjust time zone
          echo
          echo Adjusting time zone to ${TimeZone}...
          sed -ir "s|ZONE=\"UTC\"|ZONE=\"${TimeZone}\"|" /etc/sysconfig/clock
          ln -sf /usr/share/zoneinfo/${TimeZone} /etc/localtime
          echo Success!
          
          # Adjust hostname to match the provided public DNS name
          echo
          echo Adjusting HOSTNAME to match the provided public DNS name
          sed -i "s|HOSTNAME=localhost.localdomain|HOSTNAME=${PublicDns}|" /etc/sysconfig/network
          echo Success!
          
          # Install yum-cron to do automatic yum updates
          # and postfix (a secure Mail Transfer Agent) and mailx to do email notifications
          echo
          echo Installing the yum-cron package...
          yum install -y -q yum-cron    # -y and -q options must be separated for yum
          echo Installing the postfix and mailx packages...
          yum install -y -q postfix     # -y and -q options must be separated for yum
          yum install -y -q mailx
          echo Success!
          
          # Configure hourly security updates and daily complete updates
          cat > yum-cron-conf.sed <<- EOB
          s|update_messages = no|update_messages = yes|
          s|download_updates = no|download_updates = yes|
          # s|apply_updates = no|apply_updates = yes|
          s|system_name = None|system_name = ${AWS::StackName}|
          s|emit_via = stdio|emit_via = email|
          s|email_from = root|email_from = yum-cron|
          s|email_to = root|email_to = ${YumUpdateEmail}|
          EOB
          echo
          echo Configuring hourly security updates...
          sed -i "s|update_cmd = default|update_cmd = security|" /etc/yum/yum-cron-hourly.conf
          sed -i -f yum-cron-conf.sed /etc/yum/yum-cron-hourly.conf
          echo Configuring  daily complete updates...
          sed -i -f yum-cron-conf.sed /etc/yum/yum-cron.conf
          rm yum-cron-conf.sed
          echo Success!
          
          # Make sure yum-cron and postfix start after all future reboots
          echo
          echo Registering yum-cron to start on every reboot...
          chkconfig yum-cron on
          echo Registering postfix to start on every reboot...
          chkconfig postfix on
          echo Success!
          
          # Clean yum and reboot to make sure everything's cool B)
          echo
          echo Rebooting...
          yum clean all
          reboot
          echo Success!
          
  # Give it a public DNS hostname
  CnameRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref PublicDns
      Type: A
      ResourceRecords: [ !GetAtt Bastion.PublicIp ]
      TTL: 60
      Comment: String
      # HealthCheckId: String
          
Outputs:
  Bastion:
    Value: !GetAtt Bastion.PublicIp
    Description: The public IP address of the new bastion host