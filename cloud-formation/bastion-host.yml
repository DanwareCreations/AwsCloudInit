AWSTemplateFormatVersion: 2010-09-09

Description: A new bastion host in its own public subnet, automatically updated, and optionally OS-hardened.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Subnet Configuration
        Parameters:
        - NetworkStackName
        - SecurityStackName
        - AzName
        - SubnetCidrBlock
      -
        Label:
          default: Bastion Host Instance Configuration
        Parameters:
        - AmiLookupFunctionArn
      -
        Label:
          default: Bastion Host Software Configuration
        Parameters:
        - KeyPair
        - HardenOS
        - TimeZone
        - YumUpdateEmail

Parameters:
  NetworkStackName:
    Type: String
    Default: MainVPC
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
    Description: Name of an active CloudFormation stack that contains the networking resources needed to create a bastion host in its own public subnet.
    ConstraintDescription: must contain only alphanumeric characters and/or hyphens, and start with a letter
  SecurityStackName:
    Type: String
    Default: BastionSecurity
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
    Description: Name of an active CloudFormation stack that contains the security group and network ACL rules for a bastion host.
    ConstraintDescription: must contain only alphanumeric characters and/or hyphens, and start with a letter
  AzName:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: The Availability Zone in which to create a public subnet for the new bastion host.
  SubnetCidrBlock:
    Type: String
    Default: 10.0.128.0/28
    AllowedPattern: ^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}(\/\d{1,2})?$
    Description: The CIDR block for the new public subnet in the provided Availability Zone.  Block size must be between a /16 netmask and a /28 netmask.
    ConstraintDescription: must be a valid CIDR block (e.g., 10.20.114.0/24)

  AmiLookupFunctionArn:
    Type: String
    Default: arn:aws:lambda:REGION:ACCOUNT_ID:function:AMILookup
    Description: ARN of a Lambda function that can return the latest AMIs for this region.  Replace "REGION" and "ACCOUNT_ID" with the correct values, as well as the function name, if applicable.

  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The EC2 key pair needed to connect to the new bastion host.
  HardenOS:
    Type: String
    Default: false
    AllowedValues: [ true, false]
    Description: Hardened bastion hosts will use the latest CIS AMI to improve security.  Unhardened hosts will use the latest Amazon Linux AMI.
  TimeZone:
    Type: String
    Default: UTC
    Description: Name of a time zone data file in /usr/share/zoneinfo (for example "America/New_York").  Used to set the time zone for the bastion hosts.
  YumUpdateEmail:
    Type: String
    Default: admin@mycompany.com
    MaxLength: 255
    AllowedPattern: ^([0-9A-Za-z]+[._-]?)+[0-9A-Za-z]+@([0-9A-Za-z]+[._-]?)+\.[0-9A-Za-z]+$
    ConstraintDescription: must be a valid Email address, like "frodo@theshire.com".
    Description: Email to which notifications from automatic yum updates will be sent.  These notifications will only indicate that updates have been downloaded; the updates will still have to be installed manually.

Conditions:
  Harden: !Equals [ !Ref HardenOS, true ]

Resources:
  # Define the new public subnet
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue MainVPC
      AvailabilityZone: !Ref AzName
      CidrBlock: !Ref SubnetCidrBlock
      MapPublicIpOnLaunch: true
  RTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !ImportValue PublicRouteTable
      SubnetId: !Ref Subnet
  ACLAssoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !ImportValue BastionNetworkACL
      SubnetId: !Ref Subnet

  # Define the EC2 instance
  AmiLookup:
    Type: Custom::AmiLookup
    Properties:
      ServiceToken: !Ref AmiLookupFunctionArn
      Region: !Ref "AWS::Region"
      AmiLookupType: !If [Harden, hardened-amzn-linux, amzn-linux]
      InstanceType: !If [Harden, t2.micro, t2.nano]
  Bastion:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: false
      EbsOptimized: false
      ImageId: !GetAtt AmiLookup.ImageId
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: !If [Harden, t2.micro, t2.nano]
      KeyName: !Ref KeyPair
      Monitoring: true
      NetworkInterfaces:
      - DeviceIndex: 0
        AssociatePublicIpAddress: true
        DeleteOnTermination: true
        GroupSet: [ !ImportValue BastionSecurityGroup ]
        SubnetId: !Ref Subnet
        Description: Network interface for a bastion host
      SourceDestCheck: true
      Tenancy: default
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install -y aws-cfn-bootstrap  # not really necessary with Amazon Linux AMI, but the docs recommend it
          /opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --region ${AWS::Region} --resource Bastion --configsets bastion
          /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --region ${AWS::Region} --resource Bastion
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M   # Minutes, default 5
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          bastion:
          - cfn-hup
          - add-newline-to-bash
          - auto-yum-update
          - set-timezone    # manually calls reboot, so must come after other config sets
        cfn-hup:
          packages:
            yum:
              aws-cfn-bootstrap: []
          files:
            /etc/cfn/cfn-hup.conf:
              # interval in minutes, default 15 (comments not allowed in cfn-hup.conf file)
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=15
                verbose=true
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.conf:
              content: !Sub |
                [reset-on-update]
                triggers=post.update
                path=Resources.Bastion.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --region ${AWS::Region} --resource Bastion --configsets bastion
                runas=root
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.conf
                packages:
                  yum: [ aws-cfn-bootstrap ]
        add-newline-to-bash:
          commands:
            add-newline-to-bash:
              command: |
                echo 'PS1="\n$PS1"' >> /home/ec2-user/.bashrc
                echo Added a newline to bash prompt
              test: |
                numAddedLines=$(cat /home/ec2-user/.bashrc | grep '^PS1="\\n\$PS1"$' | wc --lines)
                if [ $numAddedLines = 0 ] ; then
                  echo Newline will be added to bash prompt
                  exit 0
                else
                  echo Newline already added to bash prompt
                  exit 1
                fi
              ignoreErrors: true
        auto-yum-update:
          packages:
            yum:
              yum-cron: []
              postfix: []
              mailx: []
          files:
            /etc/danware/bastion-yum-cron.sed:
              content: !Sub |
                s|update_messages.*|update_messages = yes|
                s|download_updates.*|download_updates = yes|
                s|apply_updates.*|apply_updates = no|
                s|system_name.*|system_name = None|
                s|emit_via.*|emit_via = email|
                s|email_from.*|email_from = yum-cron@localhost|
                s|email_to.*|email_to = ${YumUpdateEmail}|
              mode: "000400"
              owner: root
              group: root
          commands:
            1_security-updates:
              command: |
                sed --file /etc/danware/bastion-yum-cron.sed --in-place /etc/yum/yum-cron-hourly.conf
                sed 's|update_cmd.*|update_cmd = security|' --in-place /etc/yum/yum-cron-hourly.conf
                echo Hourly security updates configured
            2_complete-updates:
              command: |
                sed --file /etc/danware/bastion-yum-cron.sed --in-place /etc/yum/yum-cron.conf
                echo Daily complete updates configured
            3_restart-yum-cron:
              command: |
                service yum-cron restart
          services:
            sysvinit:
              yum-cron:
                enabled: true
                ensureRunning: true
                packages: 
                  yum: [ yum-cron ]
              postfix:
                enabled: true
                ensureRunning: true
                packages: 
                  yum: [ postfix ]
        set-timezone:
          commands:
            set-timezone:
              command: !Sub |
                newZone=${TimeZone}
                oldZone=$(date +%Z)
                sed "s|ZONE.*|ZONE=\"$newZone\"|" --in-place /etc/sysconfig/clock
                ln --symbolic --force /usr/share/zoneinfo/$newZone /etc/localtime
                echo Time zone changed from \"$oldZone\" to \"$newZone\"
                reboot
              test: !Sub |
                timeZone=${TimeZone}
                numChangedLines=$(cat /etc/sysconfig/clock | grep "^ZONE=\"$timeZone\"$" | wc --lines)
                if [ $numChangedLines = 0 ] ; then
                  echo Time zone will be changed to \"$timeZone\"
                  exit 0
                else
                  echo Time zone is already \"$timeZone\"
                  exit 1
                fi

Outputs:
  Bastion:
    Value: !GetAtt Bastion.PublicIp
    Description: The public IP address of the new bastion host