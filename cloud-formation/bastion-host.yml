AWSTemplateFormatVersion: 2010-09-09

Description: A new bastion host in its own public subnet, automatically updated, and optionally OS-hardened.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Subnet Configuration
        Parameters:
        - NetworkStackName
        - SecurityStackName
        - AzName
        - SubnetCidrBlock
      -
        Label:
          default: Bastion Host Instance Configuration
        Parameters:
        - PublicDns
        - HostedZone
        - AmiLookupFunction
        - HardenOS
        - KeyPair
        - TimeZone
        - YumUpdateEmail

Parameters:
  NetworkStackName:
    Type: String
    Default: MainVPC
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
    Description: Name of an active CloudFormation stack that contains the networking resources needed to create a bastion host in its own public subnet.
    ConstraintDescription: must contain only alphanumeric characters and/or hyphens, and start with a letter
  SecurityStackName:
    Type: String
    Default: BastionSecurity
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
    Description: Name of an active CloudFormation stack that contains the security group and network ACL rules for a bastion host.
    ConstraintDescription: must contain only alphanumeric characters and/or hyphens, and start with a letter
  AzName:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: The Availability Zone in which to create a public subnet for the new bastion host.
  SubnetCidrBlock:
    Type: String
    Default: 10.0.128.0/28
    AllowedPattern: ^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}(\/\d{1,2})?$
    Description: The CIDR block for the new public subnet in the provided Availability Zone.
    ConstraintDescription: must be a valid CIDR block (e.g., 52.20.114.0/24)
  
  PublicDns:
    Type: String
    Default: bastion.mycompany.com
    MaxLength: 255
    AllowedPattern: ^([0-9A-Za-z]+[._-]?)+[0-9A-Za-z]+$
    ConstraintDescription: must be a valid domain name, i.e., <= 255 alphanumeric characters, periods, hyphens, and underscores.
    Description: The public DNS name that will be assigned to the new bastion host.  It must be a subdomain of a hosted zone that has already been created in AWS.
  HostedZone:
    Type: AWS::Route53::HostedZone::Id
    Description: The hosted zone in which the new bastion host's CNAME record will be stored.
  AmiLookupFunctionArn:
    Type: String
    Default: arn:aws:lambda:REGION:ACCOUNT_ID:function:RegionLookup
    Description: ARN of a Lambda function that can return the latest AMIs for this region.  Replace "REGION" and "ACCOUNT_ID" with appropriate values, and the function name if applicable.
  HardenOS:
    Type: String
    Default: true
    AllowedValues: [ true, false]
    Description: Hardened bastion hosts will use the latest CIS AMI to improve security.  Unhardened hosts will use the latest Amazon Linux AMI.
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The EC2 key pair needed to connect to all new bastion hosts.
  TimeZone:
    Type: String
    Default: UTC
    Description: Name of a time zone data file in /usr/share/zoneinfo (for example "America/New_York").  Used to set the time zone for the bastion hosts.
  YumUpdateEmail:
    Type: String
    Default: admin@mycompany.com
    MaxLength: 255
    AllowedPattern: ^([0-9A-Za-z]+[._-]?)+[0-9A-Za-z]+@([0-9A-Za-z]+[._-]?)+\.[0-9A-Za-z]+$
    ConstraintDescription: must be a valid Email address, like "frodo@theshire.com".
    Description: Email to which notifications from automatic yum updates will be sent.  These notifications will only indicate that updates have been downloaded; the updates will still have to be installed manually.
  
Conditions:
  Harden: !Equals [ !Ref HardenOS, true ]
  
Resources:  
  # Define the new public subnet
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue MainVPC
      AvailabilityZone: !Ref AzName
      CidrBlock: !Ref SubnetCidrBlock
      MapPublicIpOnLaunch: true
  RTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !ImportValue PublicRouteTable
      SubnetId: !Ref Subnet
  ACLAssoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !ImportValue BastionNetworkACL
      SubnetId: !Ref Subnet
          
  # Define the EC2 instance
  AmiLookup:
    Type: Custom::AmiLookup
    Properties:
      ServiceToken: !Ref AmiLookupFunctionArn
      Region: !Ref "AWS::Region"
      AmiLookupType: !If [Harden, hardened-amzn-linux, amzn-linux]
      InstanceType: !If [Harden, t2.micro, t2.nano]
  Bastion:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: false
      EbsOptimized: false
      ImageId: !GetAtt AmiLookup.ImageId
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: !If [Harden, t2.micro, t2.nano]
      KeyName: !Ref KeyPair
      Monitoring: true
      NetworkInterfaces:
      - DeviceIndex: 0
        AssociatePublicIpAddress: true
        DeleteOnTermination: true
        GroupSet: [ !ImportValue BastionSecurityGroup ]
        SubnetId: !Ref Subnet
        Description: Network interface for a bastion host
      SourceDestCheck: true
      Tenancy: default
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo
          echo **********  BEGIN DANWARE CLOUD INIT  **********
          echo
          
          touch cloud-init.bash
          chmod 700 cloud-init.bash
          repoURL=https://raw.githubusercontent.com/DanwareCreations/AwsUtil/issue-15/shell-scripts
          
          curl -s $repoURL/add-newline-to-shell.bash -o cloud-init.bash
          bash cloud-init.bash
          
          curl -s $repoURL/dns-hostname.bash -o cloud-init.bash
          bash cloud-init.bash ${PublicDns}
          
          curl -s $repoURL/set-timezone.bash -o cloud-init.bash
          bash cloud-init.bash ${TimeZone}
          
          curl -s $repoURL/auto-yum-update.bash -o cloud-init.bash
          bash cloud-init.bash ${AWS::StackName} ${YumUpdateEmail}
          
          rm cloud-init.bash
          
          echo
          echo **********  END DANWARE CLOUD INIT  **********
          echo
          
  # Give it a public DNS hostname
  CnameRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref PublicDns
      Type: CNAME
      ResourceRecords: [ !GetAtt Bastion.PublicDnsName ]
      TTL: 60
      Comment: String
      # HealthCheckId: String
          
Outputs:
  Bastion:
    Value: !GetAtt Bastion.PublicIp
    Description: The public IP address of the new bastion host